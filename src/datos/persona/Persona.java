package datos.persona;

// Generated by MyEclipse Persistence Tools

import java.util.Date;

import ccecho2.complex.ComboList.ComboList;

import app.combos.ComboGANANCIAS;
import app.combos.ComboInscripcionIVA;
import app.combos.ComboTiposDocumento;

import datos.localidad.Localidad;

/**
 * Persona generated by MyEclipse Persistence Tools
 */
public class Persona extends AbstractPersona implements java.io.Serializable {

	private static final long serialVersionUID = 1L;

	// Constantes
	public static short PersonaFisica = 1;
	public static short PersonaJuridica = 2;
	
	// Unifico el comportamiento si es Persona Física o Jurídica
	@SuppressWarnings("unused")
	private String descripcion;
	
	@SuppressWarnings("unused")
	private String CUIT_DNI;
	
	// Constructors

	/** default constructor */
	public Persona() {}

	/** minimal constructor */
	public Persona(Integer idPersona, String apellido, String nombres,
			Short idDocumentoTipo, Long documentoNro, Short idInscripcionIva,
			Short idPersonaTipo, String sexo, Short idInscripcionGanancias) {
		super(idPersona, apellido, nombres, idDocumentoTipo, documentoNro,
				idInscripcionIva, idPersonaTipo, sexo, idInscripcionGanancias);
	}

	/** full constructor */
	public Persona(Integer idPersona, Localidad localidad, String apellido,
			String nombres, Short idDocumentoTipo, Long documentoNro,
			Date fechaNacimiento, String direccion, Short idInscripcionIva,
			String cuit, String telefono, String celular, String mail,
			String razonSocial, Date fechaAlta, Short idPersonaTipo,
			String sexo, String observaciones, Short idInscripcionGanancias) {
		super(idPersona, localidad, apellido, nombres, idDocumentoTipo,
				documentoNro, fechaNacimiento, direccion, idInscripcionIva,
				cuit, telefono, celular, mail, razonSocial, fechaAlta,
				idPersonaTipo, sexo, observaciones, idInscripcionGanancias);
	}
	
	public void setDescripcion(String d) {this.descripcion = d;}
	
	/**
	 * Encapsula la lógica de determinar si es una persona FISICA o JURIDICA
	 * @return
	 */
	public String getDescripcion() {
		
		String descripcion = "";
		
		if (this.getIdPersonaTipo() == PersonaFisica) {
			descripcion = this.getApellido() + ", " + this.getNombres();
		} else if (this.getIdPersonaTipo() == PersonaJuridica) {
			descripcion = this.getRazonSocial();
		}
		
		return descripcion;
		
	}
	
	public String getResponsabilidadIVA() {
		ComboList cboIVA = new ComboInscripcionIVA(200,22,110,true);
		return cboIVA.getText(this.getIdInscripcionIva());
	}

	public String getResponsabilidadGANANCIAS() {		
		ComboList cbo = new ComboGANANCIAS(200,22,110,true,false);
		return cbo.getText(this.getIdInscripcionGanancias());
	}

	
	public String getCUIT_DNI() {
		
		String descripcion = "";
		
		if (this.getIdPersonaTipo() == PersonaFisica) {
			
			// valido la responsabilidad
			if (this.getIdInscripcionIva() != ComboInscripcionIVA.ConsumidorFinal) {
				descripcion = this.getCuit();
			} else {			
				ComboList cboDocTipo = new ComboTiposDocumento(200,22,110,true);
				descripcion = cboDocTipo.getText(this.getIdDocumentoTipo()) + " - " + this.getDocumentoNro();
			}
			
		} else if (this.getIdPersonaTipo() == PersonaJuridica) {
			descripcion = this.getCuit();
		}
		
		return descripcion;
		
	}
	
	public static String getPersonaTipo(short i) {
		if (i == PersonaFisica) {
			return "Física";
		} else if (i == PersonaJuridica){
			return "Jurídica";
		} else {
			return "Error";
		}
	}
	
	/**
	 * Evalua si según la responsabilidad del IVA le tengo que hacer un comprobante A o B
	 * @return Verdadero/Falso
	 */
	public Boolean comprobanteA() {
		boolean respuestaA = false;
		if (this.getIdInscripcionIva() == ComboInscripcionIVA.ResponsableInscripto) {
			respuestaA = true;
		}
		return respuestaA;
	}

}